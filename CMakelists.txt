cmake_minimum_required(VERSION 3.11) 
project(Tetris)

# Generate compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 17)

add_definitions(-DNOMINMAX)


#add the raylib library

set(RAYLIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/raylib)
include_directories(${RAYLIB_DIR}/include)

if (WIN32)
    
    set(RAYLIB_LIB ${RAYLIB_DIR}/lib/raylib.lib)
    set(ADDITIONAL_LIBS winmm)
else()
    # Handle other platforms if needed (Linux, macOS, etc.)
    set(RAYLIB_LIB ${RAYLIB_DIR}/lib/libraylib.a)
endif()



# Our Project s
file(GLOB SOURCES src/*.cpp)
file(GLOB HEADERS src/*.h)

add_executable(${PROJECT_NAME}  main.cpp ${SOURCES} ${HEADERS} )

target_link_libraries(${PROJECT_NAME} ${RAYLIB_LIB} ${ADDITIONAL_LIBS})

target_include_directories(${PROJECT_NAME} PRIVATE src)
# Set the output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Copy fonts folder to the output directory after building
add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/fonts $<TARGET_FILE_DIR:${PROJECT_NAME}>/fonts
)
# Copy sounds folder to the output directory after building
add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/sounds $<TARGET_FILE_DIR:${PROJECT_NAME}>/sounds
)

